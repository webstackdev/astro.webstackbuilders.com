---
/**
 * Test component for rendering markdown content in E2E tests
 * This component renders markdown files from the fixtures directory
 * and applies all configured markdown plugins.
 */

interface Props {
  /** The markdown content to render (from fixtures) */
  content: string
}

const { content } = Astro.props

// Parse and render the markdown using Astro's built-in capabilities
// This ensures we're testing the actual markdown pipeline as configured
const { Content } = await (async () => {
  // For testing, we'll use Astro's markdown rendering directly
  const { remark } = await import('remark')
  const { default: remarkGfm } = await import('remark-gfm')
  const { default: remarkRehype } = await import('remark-rehype')
  const { default: rehypeStringify } = await import('rehype-stringify')
  const { default: rehypeSlug } = await import('rehype-slug')

  // Import custom plugins (without .ts extensions for Astro)
  const remarkAbbrModule = await import('../../lib/markdown/plugins/remark-abbr')
  const remarkAbbr = remarkAbbrModule.default

  const remarkAttrModule = await import('../../lib/markdown/plugins/remark-attr')
  const remarkAttr = remarkAttrModule.default

  const remarkAttributionModule = await import('../../lib/markdown/plugins/remark-attribution')
  const remarkAttribution = remarkAttributionModule.default

  const { default: remarkBreaks } = await import('remark-breaks')
  const { default: remarkEmoji } = await import('remark-emoji')

  const remarkLinkifyRegexModule = await import('remark-linkify-regex')
  const remarkLinkifyRegex = remarkLinkifyRegexModule.default

  const { default: remarkToc } = await import('remark-toc')
  const { rehypeAccessibleEmojis } = await import('rehype-accessible-emojis')
  const { default: rehypeAutolinkHeadings } = await import('rehype-autolink-headings')

  const rehypeTailwindModule = await import('../../lib/markdown/plugins/rehype-tailwind')
  const { rehypeTailwindClasses } = rehypeTailwindModule

  // Import configs
  const configModule = await import('../../lib/config/markdown')
  const { remarkAttrConfig, remarkTocConfig, rehypeAutolinkHeadingsConfig, remarkRehypeConfig } =
    configModule

  // Process markdown through the full pipeline
  const processor = remark()
    .use(remarkGfm)
    .use(remarkAbbr)
    .use(remarkAttr, remarkAttrConfig)
    .use(remarkAttribution)
    .use(remarkBreaks)
    .use(remarkEmoji)
    .use(remarkLinkifyRegex(/^(https?:\/\/[^\s$.?#].[^\s]*)$/i))
    .use(remarkToc, remarkTocConfig)
    .use(remarkRehype, remarkRehypeConfig)
    .use(rehypeSlug)
    .use(rehypeAccessibleEmojis)
    .use(rehypeAutolinkHeadings, rehypeAutolinkHeadingsConfig)
    .use(rehypeTailwindClasses)
    .use(rehypeStringify)

  const result = await processor.process(content)
  const html = String(result)

  return { Content: () => html }
})()

const html = Content()
---

<article class="markdown-content" data-testid="markdown-output">
  <Fragment set:html={html} />
</article>
