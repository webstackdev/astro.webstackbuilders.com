---
import { themes } from './server'
import Sprite from '../Sprite/index.astro'
import type { SpriteName } from '../Sprite/sprites'

export interface Props {
  closeComponent?: string
  label?: string
}

const { closeComponent = 'close', label = 'Select theme' } = Astro.props
---

<style>
  /* Modal max-height animation */
  .themepicker {
    transition: max-height 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    max-height: 0;
  }

  .themepicker.is-open {
    max-height: 14em;
  }

  /* Theme item animations and effects */
  .themepicker__item {
    transition: transform 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .themepicker__item:hover {
    box-shadow: 0 2px 16px rgba(0, 0, 0, 0.15);
    transform: scale(1.05);
    z-index: 1;
  }

  .themepicker__item.is-active {
    box-shadow: 0 0 0 2px var(--color-primary) !important;
    transform: scale(1);
    z-index: 1;
  }

  .themepicker__item.is-active::after {
    border-color: transparent transparent var(--color-primary) transparent;
    border-style: solid;
    border-width: 0 10px 12px 10px;
    content: '';
    display: block;
    height: 0;
    left: 50%;
    position: absolute;
    top: 100%;
    transform: translate(-50%, 1.25em);
    width: 0;
  }

  /* Custom scrollbar */
  .themepicker__list::-webkit-scrollbar {
    height: 8px;
  }

  .themepicker__list::-webkit-scrollbar-thumb {
    background: var(--color-border);
  }

  .themepicker__list::-webkit-scrollbar-track {
    background: var(--color-bg-offset);
  }

  /* Overlapping color circles */
  .themepicker__hue + .themepicker__hue {
    margin-left: -0.3125em;
  }
</style>

<div
  class="themepicker bg-[var(--color-bg-offset)] shadow-[0_1px_0_0_var(--color-bg)] block overflow-hidden relative w-full"
  data-nosnippet
  hidden
>
  <h3
    class="font-sans text-[var(--font-size-default)] font-[var(--font-weight-bold)] tracking-[var(--letter-spacing-sm)] leading-[calc(2+0.6)] text-center uppercase"
  >
    {label}
  </h3>
  <ul
    id="theme-menu"
    class="themepicker__list block mt-[2.1em] mb-[0.1em] overflow-x-auto overflow-y-hidden py-4 px-6 pb-8 text-center whitespace-nowrap w-full"
    style="-webkit-overflow-scrolling: touch;"
  >
    {
      themes.map(theme => (
        <li class="themepicker__item inline-block relative rounded-lg scale-100 ml-4 first:ml-0">
          <button
            class="block p-4 rounded-lg border border-[var(--color-bg)] w-full text-center bg-[var(--color-bg)]"
            aria-label={`select color theme ${theme.name}`}
            data-theme={theme.id}
          >
            <span class="block text-[var(--color-text)]">{theme.name}</span>
            <span class="block py-0.5">
              <span class="themepicker__hue rounded-full shadow-[0_0_0_2px_var(--color-text)] inline-block h-6 w-6 overflow-hidden text-left indent-full align-bottom whitespace-nowrap bg-[var(--color-primary)]" />
              <span class="themepicker__hue rounded-full shadow-[0_0_0_2px_var(--color-text)] inline-block h-6 w-6 overflow-hidden text-left indent-full align-bottom whitespace-nowrap bg-[var(--color-secondary)]" />
              <span class="themepicker__hue rounded-full shadow-[0_0_0_2px_var(--color-text)] inline-block h-6 w-6 overflow-hidden text-left indent-full align-bottom whitespace-nowrap bg-[var(--color-border)]" />
              <span class="themepicker__hue rounded-full shadow-[0_0_0_2px_var(--color-text)] inline-block h-6 w-6 overflow-hidden text-left indent-full align-bottom whitespace-nowrap bg-[var(--color-text-offset)]" />
              <span class="themepicker__hue rounded-full shadow-[0_0_0_2px_var(--color-text)] inline-block h-6 w-6 overflow-hidden text-left indent-full align-bottom whitespace-nowrap bg-[var(--color-text)]" />
            </span>
          </button>
        </li>
      ))
    }
  </ul>
  <button
    class="bg-[var(--color-secondary)] border-none text-[var(--color-text)] flex p-1.5 absolute top-0 right-0 transition-all duration-150 ease-in-out hover:bg-[var(--color-secondary-offset)] hover:text-[var(--color-text)] focus:bg-[var(--color-secondary-offset)] focus:text-[var(--color-text)]"
    type="button"
    aria-label="Close theme picker dialog"
  >
    <Sprite name={closeComponent as SpriteName} class="h-8 w-8" />
  </button>
</div>
<script>
  import { registerScript } from '@components/Scripts/loader'
  import { ThemePicker } from './client'

  // Register theme picker script to initialize with delayed loading
  registerScript(ThemePicker)
</script>
