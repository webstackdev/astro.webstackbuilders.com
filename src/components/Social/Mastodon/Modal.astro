---
/*!
 * Mastodon Share Modal
 *
 * SPDX-FileCopyrightText: Â© 2025 Kevin Brown <kevin@webstackbuilders.com>
 * SPDX-License-Identifier: AGPL-3.0-only
 */

import InstanceSelector from './InstanceSelector.astro'

interface Props {
  id?: string
}

const { id = 'mastodon-modal' } = Astro.props
---

<div
  id={id}
  class="mastodon-modal"
  role="dialog"
  aria-modal="true"
  aria-labelledby="modal-title"
  hidden
>
  <div class="modal-backdrop"></div>
  <div class="modal-content">
    <div class="modal-header">
      <h2 id="modal-title">Share to Mastodon</h2>
      <button type="button" class="modal-close" aria-label="Close modal">
        <svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path d="M18 6L6 18M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <form id="mastodon-share-form" class="modal-body">
      <div class="share-text-wrapper">
        <label for="share-text">Text to share</label>
        <textarea id="share-text" name="text" rows="4" readonly class="share-text"></textarea>
      </div>

      <InstanceSelector />

      <div class="modal-actions">
        <button type="button" class="btn-secondary modal-cancel">Cancel</button>
        <button type="submit" class="btn-primary">Share</button>
      </div>

      <p class="modal-status" role="status" aria-live="polite"></p>
    </form>
  </div>
</div>

<style>
  .mastodon-modal {
    position: fixed;
    inset: 0;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
  }

  .mastodon-modal[hidden] {
    display: none;
  }

  .modal-backdrop {
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
  }

  .modal-content {
    position: relative;
    width: 100%;
    max-width: 32rem;
    max-height: 90vh;
    overflow: auto;
    background: var(--color-bg);
    border-radius: 0.5rem;
    box-shadow:
      0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  .modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem;
    border-bottom: 1px solid var(--color-border);
  }

  .modal-header h2 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .modal-close {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
    padding: 0;
    border: none;
    background: transparent;
    border-radius: 0.25rem;
    color: var(--color-text-muted);
    cursor: pointer;
    transition: all 0.15s ease;
  }

  .modal-close:hover {
    background: var(--color-bg-muted);
    color: var(--color-text);
  }

  .modal-body {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding: 1.5rem;
  }

  .share-text-wrapper {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .share-text-wrapper label {
    font-weight: 500;
  }

  .share-text {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--color-border);
    border-radius: 0.375rem;
    background: var(--color-bg-muted);
    font-family: inherit;
    font-size: 0.875rem;
    line-height: 1.5;
    resize: vertical;
  }

  .share-text:focus {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  .modal-actions {
    display: flex;
    gap: 0.75rem;
    justify-content: flex-end;
  }

  .btn-primary,
  .btn-secondary {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 0.375rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.15s ease;
  }

  .btn-primary {
    background: var(--color-primary);
    color: white;
  }

  .btn-primary:hover {
    background: var(--color-primary-dark);
  }

  .btn-primary:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .btn-secondary {
    background: transparent;
    color: var(--color-text);
    border: 1px solid var(--color-border);
  }

  .btn-secondary:hover {
    background: var(--color-bg-muted);
  }

  .modal-status {
    margin: 0;
    font-size: 0.875rem;
    text-align: center;
  }

  .modal-status.error {
    color: var(--color-error);
  }

  .modal-status.success {
    color: var(--color-success);
  }
</style>

<script>
  import { createFocusTrap } from 'focus-trap'
  import type { FocusTrap } from 'focus-trap'
  import { isMastodonInstance } from './detector'
  import { buildShareUrl } from './config'
  import { $currentInstance } from './store'

  interface WindowWithMastodon extends Window {
    mastodonSaveInstance?: (_instance: string, _remember: boolean) => void
  }

  const modal = document.querySelector('#mastodon-modal') as HTMLDivElement
  const backdrop = modal?.querySelector('.modal-backdrop') as HTMLDivElement
  const closeButton = modal?.querySelector('.modal-close') as HTMLButtonElement
  const cancelButton = modal?.querySelector('.modal-cancel') as HTMLButtonElement
  const form = modal?.querySelector('#mastodon-share-form') as HTMLFormElement
  const textarea = modal?.querySelector('#share-text') as HTMLTextAreaElement
  const instanceInput = modal?.querySelector('#mastodon-instance') as HTMLInputElement
  const rememberCheckbox = modal?.querySelector('#remember-instance') as HTMLInputElement
  const submitButton = form?.querySelector('button[type="submit"]') as HTMLButtonElement
  const statusElement = modal?.querySelector('.modal-status') as HTMLParagraphElement

  let focusTrap: FocusTrap | null = null
  let shareText = ''

  // Initialize focus trap
  if (modal) {
    focusTrap = createFocusTrap(modal, {
      escapeDeactivates: true,
      clickOutsideDeactivates: true,
      onDeactivate: closeModal,
    })
  }

  /** Opens the modal with the given share text */
  function openModal(text: string) {
    shareText = text
    if (textarea) {
      textarea.value = text
    }

    // Restore last used instance
    const lastInstance = $currentInstance.get()
    if (lastInstance && instanceInput) {
      instanceInput.value = lastInstance
    }

    modal?.removeAttribute('hidden')
    focusTrap?.activate()

    // Emit custom event for analytics
    window.dispatchEvent(
      new CustomEvent('mastodon:modal-open', {
        detail: { text },
      })
    )
  }

  /** Closes the modal and deactivates focus trap */
  function closeModal() {
    modal?.setAttribute('hidden', '')
    focusTrap?.deactivate()
    resetForm()

    // Emit custom event for analytics
    window.dispatchEvent(new CustomEvent('mastodon:modal-close'))
  }

  /** Resets the form to initial state */
  function resetForm() {
    if (form) {
      form.reset()
    }
    if (statusElement) {
      statusElement.textContent = ''
      statusElement.className = 'modal-status'
    }
    if (submitButton) {
      submitButton.disabled = false
    }
  }

  /** Shows a status message to the user */
  function showStatus(message: string, type: 'error' | 'success' = 'error') {
    if (statusElement) {
      statusElement.textContent = message
      statusElement.className = `modal-status ${type}`
    }
  }

  /** Handles form submission and shares to Mastodon */
  async function handleSubmit(event: Event) {
    event.preventDefault()

    const instance = instanceInput?.value?.trim()
    if (!instance) {
      showStatus('Please enter a Mastodon instance')
      return
    }

    submitButton.disabled = true
    showStatus('Detecting instance...', 'success')

    try {
      // Verify it's a Mastodon instance
      const isMastodon = await isMastodonInstance(instance)
      if (!isMastodon) {
        showStatus('This does not appear to be a Mastodon instance')
        submitButton.disabled = false
        return
      }

      // Save instance if remember is checked
      const remember = rememberCheckbox?.checked || false
      if (remember && (window as WindowWithMastodon).mastodonSaveInstance) {
        ;(window as WindowWithMastodon).mastodonSaveInstance?.(instance, remember)
      }

      // Store current instance
      $currentInstance.set(instance)

      // Build share URL and redirect
      const shareUrl = buildShareUrl(instance, shareText)

      // Emit custom event for analytics
      window.dispatchEvent(
        new CustomEvent('mastodon:share', {
          detail: { instance, text: shareText, url: shareUrl },
        })
      )

      // Open in new tab
      window.open(shareUrl, '_blank', 'noopener,noreferrer')

      // Close modal after short delay
      showStatus('Opening Mastodon...', 'success')
      setTimeout(closeModal, 1000)
    } catch (error) {
      console.error('Mastodon share error:', error)
      showStatus('Failed to verify instance. Please try again.')
      submitButton.disabled = false
    }
  }

  // Event listeners
  closeButton?.addEventListener('click', closeModal)
  cancelButton?.addEventListener('click', closeModal)
  backdrop?.addEventListener('click', closeModal)
  form?.addEventListener('submit', handleSubmit)

  // Global function to open modal
  interface WindowWithModal extends Window {
    openMastodonModal?: (_text: string) => void
  }

  ;(window as WindowWithModal).openMastodonModal = openModal

  // Listen for ESC key
  document.addEventListener('keydown', (event: KeyboardEvent) => {
    if (event.key === 'Escape' && !modal?.hasAttribute('hidden')) {
      closeModal()
    }
  })
</script>
