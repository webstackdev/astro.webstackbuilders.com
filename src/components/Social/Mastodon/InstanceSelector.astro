---
/*!
 * Adapted from Share₂Fedi
 * https://github.com/kytta/share2fedi
 *
 * SPDX-FileCopyrightText: © 2023 Nikita Karamov <me@kytta.dev>
 * SPDX-FileCopyrightText: © 2025 Kevin Brown <kevin@webstackbuilders.com>
 * SPDX-License-Identifier: AGPL-3.0-only
 */

interface Props {
  instance?: string
  error?: string
}

const { instance, error } = Astro.props
---

<div class="instance-selector">
  <label for="mastodon-instance" class="instance-label">
    <span>Mastodon Instance</span>
    <div class="instance-input-wrapper">
      <span class="instance-prefix" aria-label="https prefix">https://</span>
      <input
        type="text"
        id="mastodon-instance"
        name="instance"
        placeholder="mastodon.social"
        required
        aria-invalid={Boolean(error)}
        aria-errormessage={error ? 'instance-error' : undefined}
        aria-describedby="instance-prefix"
        value={instance || ''}
      />
    </div>
    {
      error && (
        <p class="error-message" id="instance-error" aria-live="assertive">
          {error}
        </p>
      )
    }
  </label>

  <div id="saved-instances" class="saved-instances" style="display: none;">
    <p class="saved-label">Previously used:</p>
    <div class="saved-list"></div>
  </div>

  <label for="remember-instance" class="remember-label">
    <input type="checkbox" id="remember-instance" name="remember" />
    <span>Remember this instance</span>
  </label>
</div>

<style>
  .instance-selector {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .instance-label {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    font-weight: 500;
  }

  .instance-input-wrapper {
    display: flex;
    align-items: stretch;
    border: 1px solid var(--color-border);
    border-radius: 0.375rem;
    overflow: hidden;
    background: var(--color-bg-input);
  }

  .instance-prefix {
    display: flex;
    align-items: center;
    padding: 0.5rem 0.75rem;
    background: var(--color-bg-muted);
    color: var(--color-text-muted);
    font-size: 0.875rem;
    user-select: none;
  }

  input[type='text'] {
    flex: 1;
    min-width: 0;
    padding: 0.5rem 0.75rem;
    border: none;
    background: transparent;
    font-size: 1rem;
    color: var(--color-text);
  }

  input[type='text']:focus {
    outline: none;
  }

  .instance-input-wrapper:focus-within {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  input[aria-invalid='true'] ~ .instance-input-wrapper {
    border-color: var(--color-error);
  }

  .error-message {
    margin: 0;
    font-size: 0.875rem;
    color: var(--color-error);
  }

  .saved-instances {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .saved-label {
    margin: 0;
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--color-text-muted);
  }

  .saved-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .saved-list :global(.saved-instance) {
    padding: 0.25rem 0.5rem;
    background: var(--color-bg-muted);
    border: 1px solid var(--color-border);
    border-radius: 0.25rem;
    font-size: 0.875rem;
    color: var(--color-primary);
    cursor: pointer;
    transition: all 0.15s ease;
  }

  .saved-list :global(.saved-instance:hover) {
    background: var(--color-primary);
    color: var(--color-bg);
  }

  .remember-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    cursor: pointer;
  }

  input[type='checkbox'] {
    width: 1rem;
    height: 1rem;
    cursor: pointer;
  }
</style>

<script>
  import { normalizeURL } from './detector'
  import { $savedInstances, saveInstance } from './store'

  const instanceInput = document.querySelector('#mastodon-instance') as HTMLInputElement
  const savedInstancesContainer = document.querySelector('#saved-instances') as HTMLDivElement
  const savedList = document.querySelector('.saved-list') as HTMLDivElement

  // Populate saved instances
  $savedInstances.subscribe(instances => {
    if (instances.size === 0) {
      savedInstancesContainer.style.display = 'none'
      return
    }

    savedInstancesContainer.style.display = 'flex'
    const savedArray = [...instances]

    // Pre-fill first instance if input is empty
    if (!instanceInput.value && savedArray.length > 0) {
      const firstInstance = savedArray[0]
      if (firstInstance) {
        instanceInput.value = firstInstance
      }
    }

    // Create clickable instance buttons
    savedList.replaceChildren(
      ...savedArray.map(instance => {
        const button = document.createElement('button')
        button.type = 'button'
        button.className = 'saved-instance'
        button.textContent = instance
        button.addEventListener('click', () => {
          instanceInput.value = instance
          instanceInput.focus()
        })
        return button
      })
    )
  })

  // Expose save function for form submission
  interface WindowWithMastodon extends Window {
    mastodonSaveInstance?: (instance: string, remember: boolean) => void
  }

  ;(window as WindowWithMastodon).mastodonSaveInstance = (instance: string, remember: boolean) => {
    if (remember) {
      saveInstance(normalizeURL(instance))
    }
  }
</script>
