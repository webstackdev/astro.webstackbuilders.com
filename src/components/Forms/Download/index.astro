---
// DownloadForm.astro - Gated form for download resources
interface Props {
  title: string
  fileName: string
  fileType?: string
  className?: string
}

const { title, fileName, fileType = 'resource', className = '' } = Astro.props
const downloadUrl = `/downloads/${fileName}`
---

<div class={`download-form-wrapper ${className}`}>
  <div class="bg-[var(--color-bg)] p-6 md:p-8 rounded-2xl shadow-lg border border-[var(--color-border)]">
    <div class="mb-6">
      <h3 class="text-xl md:text-2xl font-semibold text-[var(--color-text)] mb-2">
        Download {title}
      </h3>
      <p class="text-[var(--color-text-offset)]">
        Fill out the form below to receive your {fileType.toLowerCase()} instantly.
      </p>
    </div>

    <form class="space-y-4" id="downloadForm" method="post" data-download-url={downloadUrl}>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <!-- First Name -->
        <div class="space-y-2">
          <label for="firstName" class="block text-sm font-medium text-[var(--color-text-offset)]">
            First Name <span class="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="firstName"
            name="firstName"
            autocomplete="given-name"
            class="w-full px-4 py-3 border-2 border-[var(--color-border)] rounded-xl bg-[var(--color-bg)] text-[var(--color-text)] focus:border-[var(--color-primary)] focus:ring-0 focus:outline-none transition-colors duration-200"
            required
            placeholder="John"
            minlength="2"
            maxlength="50"
          />
        </div>

        <!-- Last Name -->
        <div class="space-y-2">
          <label for="lastName" class="block text-sm font-medium text-[var(--color-text-offset)]">
            Last Name <span class="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="lastName"
            name="lastName"
            autocomplete="family-name"
            class="w-full px-4 py-3 border-2 border-[var(--color-border)] rounded-xl bg-[var(--color-bg)] text-[var(--color-text)] focus:border-[var(--color-primary)] focus:ring-0 focus:outline-none transition-colors duration-200"
            required
            placeholder="Doe"
            minlength="2"
            maxlength="50"
          />
        </div>
      </div>

      <!-- Work Email -->
      <div class="space-y-2">
        <label for="workEmail" class="block text-sm font-medium text-[var(--color-text-offset)]">
          Work Email <span class="text-red-500">*</span>
        </label>
        <input
          type="email"
          id="workEmail"
          name="workEmail"
          autocomplete="email"
          class="w-full px-4 py-3 border-2 border-[var(--color-border)] rounded-xl bg-[var(--color-bg)] text-[var(--color-text)] focus:border-[var(--color-primary)] focus:ring-0 focus:outline-none transition-colors duration-200"
          required
          placeholder="john.doe@company.com"
        />
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <!-- Job Title -->
        <div class="space-y-2">
          <label for="jobTitle" class="block text-sm font-medium text-[var(--color-text-offset)]">
            Job Title <span class="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="jobTitle"
            name="jobTitle"
            autocomplete="organization-title"
            class="w-full px-4 py-3 border-2 border-[var(--color-border)] rounded-xl bg-[var(--color-bg)] text-[var(--color-text)] focus:border-[var(--color-primary)] focus:ring-0 focus:outline-none transition-colors duration-200"
            required
            placeholder="Software Engineer"
            maxlength="100"
          />
        </div>

        <!-- Company Name -->
        <div class="space-y-2">
          <label for="companyName" class="block text-sm font-medium text-[var(--color-text-offset)]">
            Company Name <span class="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="companyName"
            name="companyName"
            autocomplete="organization"
            class="w-full px-4 py-3 border-2 border-[var(--color-border)] rounded-xl bg-[var(--color-bg)] text-[var(--color-text)] focus:border-[var(--color-primary)] focus:ring-0 focus:outline-none transition-colors duration-200"
            required
            placeholder="Acme Corporation"
            maxlength="100"
          />
        </div>
      </div>

      <!-- Privacy Notice -->
      <div class="pt-4 border-t border-[var(--color-border)]">
        <p class="text-xs text-[var(--color-text-offset)] leading-relaxed">
          By submitting this form, you agree to receive marketing communications from Webstack
          Builders. You can unsubscribe at any time. View our
          <a
            href="/privacy"
            class="text-[var(--color-primary)] hover:underline focus:outline-none focus:ring-2 focus:ring-[var(--color-primary)] focus:ring-offset-2 rounded"
          >
            Privacy Policy
          </a>.
        </p>
      </div>

      <!-- Submit Button -->
      <div class="pt-2">
        <button
          type="submit"
          class="w-full bg-[var(--color-primary)] text-white font-semibold py-3 px-6 rounded-xl hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-[var(--color-primary)] focus:ring-offset-2 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
          id="downloadSubmitBtn"
        >
          Download Now
        </button>
      </div>

      <!-- Download Button (hidden until form is successfully submitted) -->
      <div class="pt-2 hidden" id="downloadButtonWrapper">
        <a
          href={downloadUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="block w-full bg-green-600 text-white font-semibold py-3 px-6 rounded-xl hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-600 focus:ring-offset-2 transition-all duration-200 text-center"
          id="downloadBtn"
        >
          <svg
            class="inline-block w-5 h-5 mr-2 -mt-1"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
            ></path>
          </svg>
          Download {fileType}
        </a>
      </div>

      <!-- Status Messages -->
      <div
        id="downloadFormStatus"
        class="hidden p-4 rounded-xl text-sm"
        role="alert"
        aria-live="polite"
      >
      </div>
    </form>
  </div>
</div>

<style>
  .download-form-wrapper {
    max-width: 600px;
    margin: 0 auto;
  }

  #downloadFormStatus.success {
    display: block;
    background-color: var(--color-success-bg, #d1fae5);
    color: var(--color-success-text, #065f46);
    border: 1px solid var(--color-success-border, #6ee7b7);
  }

  #downloadFormStatus.error {
    display: block;
    background-color: var(--color-error-bg, #fee2e2);
    color: var(--color-error-text, #991b1b);
    border: 1px solid var(--color-error-border, #fca5a5);
  }
</style>

<script>
  import { log } from '../Scripts/logger'

  class DownloadForm {
    private form: HTMLFormElement | null
    private submitButton: HTMLButtonElement | null
    private statusDiv: HTMLElement | null
    private downloadButtonWrapper: HTMLElement | null

    constructor() {
      this.form = document.getElementById('downloadForm') as HTMLFormElement
      this.submitButton = document.getElementById('downloadSubmitBtn') as HTMLButtonElement
      this.statusDiv = document.getElementById('downloadFormStatus')
      this.downloadButtonWrapper = document.getElementById('downloadButtonWrapper')

      if (this.form) {
        this.form.addEventListener('submit', this.handleSubmit.bind(this))
      }
    }

    private async handleSubmit(event: Event): Promise<void> {
      event.preventDefault()

      if (!this.form || !this.submitButton || !this.statusDiv) {
        return
      }

      // Disable submit button
      this.submitButton.disabled = true
      this.submitButton.textContent = 'Processing...'

      // Collect form data
      const formData = new FormData(this.form)
      const data = {
        firstName: formData.get('firstName'),
        lastName: formData.get('lastName'),
        workEmail: formData.get('workEmail'),
        jobTitle: formData.get('jobTitle'),
        companyName: formData.get('companyName'),
      }

      try {
        // Submit to API endpoint
        const response = await fetch('/api/downloads/submit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        })

        if (!response.ok) {
          throw new Error('Failed to submit form')
        }

        await response.json()

        // Show success message
        this.showStatus(
          'success',
          'Thank you! Click the button below to download your resource.'
        )

        // Show the download button
        if (this.downloadButtonWrapper) {
          this.downloadButtonWrapper.classList.remove('hidden')
        }

        // Hide the submit button
        if (this.submitButton) {
          this.submitButton.classList.add('hidden')
        }

        // Reset form
        this.form.reset()
      } catch (error) {
        log('Error submitting download form:', 'red')
        console.error(error)
        this.showStatus(
          'error',
          'There was an error processing your request. Please try again.'
        )
      } finally {
        // Re-enable submit button
        this.submitButton.disabled = false
        this.submitButton.textContent = 'Download Now'
      }
    }

    private showStatus(type: 'success' | 'error', message: string): void {
      if (!this.statusDiv) {
        return
      }

      this.statusDiv.className = type
      this.statusDiv.textContent = message
      this.statusDiv.classList.remove('hidden')

      // Hide after 5 seconds
      setTimeout(() => {
        this.statusDiv?.classList.add('hidden')
      }, 5000)
    }
  }

  /**
   * Initialize the download form
   */
  function initializeForm(): void {
    void new DownloadForm()
  }

  // Initialize form when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeForm)
  } else {
    initializeForm()
  }
</script>
