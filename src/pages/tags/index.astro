---
import BaseLayout from '@layouts/BaseLayout.astro'
import { getCollection } from 'astro:content'
import { exceptions } from '../../content/_tagList'

// Get all content collections with tags
const allArticles = await getCollection('articles', ({ data }) => {
  return process.env['NODE_ENV'] === 'production' ? data.isDraft !== true : true
})

const allCaseStudies = await getCollection('caseStudies')
const allServices = await getCollection('services')

// Combine all content and sort by publish date (newest first)
const allContent = [
  ...allArticles.map(item => ({ ...item, type: 'article' })),
  ...allCaseStudies.map(item => ({ ...item, type: 'case-study' })),
  ...allServices.map(item => ({ ...item, type: 'service' })),
].sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime())

// Extract all unique tags from all content
const allTags = Array.from(new Set(allContent.flatMap(item => item.data.tags || []))).filter(
  tag => tag
) // Remove any undefined/null tags

// Function to get display name for tags
const getTagDisplayName = (tag: string) => {
  return exceptions[tag as keyof typeof exceptions] || tag
}

// Function to get content preview for a specific tag
const getContentPreviewForTag = (tag: string, limit: number = 4) => {
  return allContent.filter(item => item.data.tags && item.data.tags.includes(tag)).slice(0, limit)
}

const pageTitle = 'Tags'
const path = '/tags/'
---

<BaseLayout pageTitle={pageTitle} path={path}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <header class="text-center mb-16">
      <h1 class="text-4xl md:text-5xl font-bold text-[var(--color-theme-text)] mb-4">
        Browse by Tag
      </h1>
      <p class="text-xl text-[var(--color-theme-text-muted)] max-w-3xl mx-auto">
        Explore our content organized by topics and technologies
      </p>
    </header>

    <div class="space-y-12">
      {
        allTags.sort().map(tag => {
          const contentPreview = getContentPreviewForTag(tag, 4)
          const displayName = getTagDisplayName(tag)

          return (
            <section class="border-b border-[var(--color-theme-border)] pb-12 last:border-b-0">
              <header class="mb-6">
                <h2 class="text-2xl md:text-3xl font-bold text-[var(--color-theme-text)] mb-2">
                  <a
                    href={`/tags/${tag}/`}
                    class="hover:text-[var(--color-theme-primary)] transition-colors duration-300"
                  >
                    {displayName}
                  </a>
                </h2>
                <p class="text-[var(--color-theme-text-muted)]">
                  {contentPreview.length} item{contentPreview.length !== 1 ? 's' : ''}
                  {contentPreview.length >= 4 && (
                    <span class="ml-2">
                      <a
                        href={`/tags/${tag}/`}
                        class="text-[var(--color-theme-primary)] hover:underline"
                      >
                        View all â†’
                      </a>
                    </span>
                  )}
                </p>
              </header>

              {/* Desktop: Show 3-4 cards in grid */}
              <div class="hidden md:grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {contentPreview.map(item => (
                  <article class="bg-[var(--color-theme-bg)] rounded-xl shadow-md hover:shadow-lg transition-all duration-300 hover:-translate-y-1 overflow-hidden group">
                    <a
                      href={`/${item.type === 'case-study' ? 'case-studies' : item.type === 'service' ? 'services' : 'articles'}/${item.id}`}
                      class="block h-full"
                    >
                      {'image' in item.data && item.data.image && (
                        <div class="aspect-video overflow-hidden">
                          <img
                            src={
                              typeof item.data.image === 'string'
                                ? item.data.image
                                : (item.data.image as any)?.src || item.data.image
                            }
                            alt={
                              typeof item.data.image === 'string'
                                ? item.data.title
                                : (item.data.image as any)?.alt || item.data.title
                            }
                            loading="lazy"
                            class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                          />
                        </div>
                      )}

                      <div class="p-4 space-y-3">
                        <div class="flex items-center gap-2 text-xs">
                          <span
                            class={`px-2 py-1 rounded-full text-white font-medium ${
                              item.type === 'article'
                                ? 'bg-[var(--color-theme-primary)]'
                                : item.type === 'case-study'
                                  ? 'bg-[var(--color-theme-success)]'
                                  : 'bg-[var(--color-theme-accent)]'
                            }`}
                          >
                            {item.type === 'case-study'
                              ? 'Case Study'
                              : item.type.charAt(0).toUpperCase() + item.type.slice(1)}
                          </span>
                          <time class="text-[var(--color-theme-text-muted)]">
                            {item.data.publishDate.toLocaleDateString('en-US', {
                              month: 'short',
                              year: 'numeric',
                            })}
                          </time>
                        </div>

                        <h3 class="font-semibold text-[var(--color-theme-text)] leading-tight group-hover:text-[var(--color-theme-primary)] transition-colors duration-300 line-clamp-2">
                          {item.data.title}
                        </h3>

                        {item.data.description && (
                          <p class="text-sm text-[var(--color-theme-text-muted)] line-clamp-2">
                            {item.data.description}
                          </p>
                        )}
                      </div>
                    </a>
                  </article>
                ))}
              </div>

              {/* Mobile: Show single card */}
              <div class="md:hidden">
                {contentPreview.slice(0, 1).map(item => (
                  <article class="bg-[var(--color-theme-bg)] rounded-xl shadow-md hover:shadow-lg transition-all duration-300 hover:-translate-y-1 overflow-hidden group">
                    <a
                      href={`/${item.type === 'case-study' ? 'case-studies' : item.type === 'service' ? 'services' : 'articles'}/${item.id}`}
                      class="block"
                    >
                      {'image' in item.data && item.data.image && (
                        <div class="aspect-video overflow-hidden">
                          <img
                            src={
                              typeof item.data.image === 'string'
                                ? item.data.image
                                : (item.data.image as any)?.src || item.data.image
                            }
                            alt={
                              typeof item.data.image === 'string'
                                ? item.data.title
                                : (item.data.image as any)?.alt || item.data.title
                            }
                            loading="lazy"
                            class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                          />
                        </div>
                      )}

                      <div class="p-6 space-y-3">
                        <div class="flex items-center gap-2 text-sm">
                          <span
                            class={`px-3 py-1 rounded-full text-white font-medium ${
                              item.type === 'article'
                                ? 'bg-[var(--color-theme-primary)]'
                                : item.type === 'case-study'
                                  ? 'bg-[var(--color-theme-success)]'
                                  : 'bg-[var(--color-theme-accent)]'
                            }`}
                          >
                            {item.type === 'case-study'
                              ? 'Case Study'
                              : item.type.charAt(0).toUpperCase() + item.type.slice(1)}
                          </span>
                          <time class="text-[var(--color-theme-text-muted)]">
                            {item.data.publishDate.toLocaleDateString('en-US', {
                              month: 'long',
                              year: 'numeric',
                            })}
                          </time>
                        </div>

                        <h3 class="text-lg font-semibold text-[var(--color-theme-text)] leading-tight group-hover:text-[var(--color-theme-primary)] transition-colors duration-300">
                          {item.data.title}
                        </h3>

                        {item.data.description && (
                          <p class="text-[var(--color-theme-text-muted)] line-clamp-3">
                            {item.data.description}
                          </p>
                        )}

                        <div class="pt-2">
                          <span class="inline-flex items-center text-[var(--color-theme-primary)] font-medium text-sm">
                            View{' '}
                            {contentPreview.length > 1
                              ? `all ${contentPreview.length} items`
                              : 'details'}
                            <svg
                              class="w-4 h-4 ml-1"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M9 5l7 7-7 7"
                              />
                            </svg>
                          </span>
                        </div>
                      </div>
                    </a>
                  </article>
                ))}
              </div>
            </section>
          )
        })
      }
    </div>
  </div>
</BaseLayout>
