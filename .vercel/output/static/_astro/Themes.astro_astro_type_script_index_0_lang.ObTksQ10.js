import{a as r}from"./elementListeners.BCDqkhM9.js";import{d as m}from"./selectors.BTHqoS2j.js";import{i as d,a as n}from"./elements.SYhSGS7t.js";const i={toggleBtn:".themepicker-toggle__toggle-btn",pickerModal:".themepicker",closeBtn:".themepicker__closeBtn",themeSelectBtns:".themepicker__selectBtn"},g=()=>{const t=document.querySelector(i.toggleBtn);if(!n(t))throw new Error("Toggle <button> element with icon is missing in the theme picker modal wrapper");return t},p=()=>{const t=document.querySelector(i.pickerModal);if(!d(t))throw new Error("Theme picker modal wrapper is missing in document");return t},u=()=>{const t=document.querySelector(i.closeBtn);if(!n(t))throw new Error("Close <button> element is missing in the theme picker modal wrapper");return t},f=()=>{const t=document.querySelectorAll(i.themeSelectBtns);if(!t.length)throw new Error("No theme item card select <button> elements found in theme picker modal");return t.forEach(e=>{if(!n(e))throw new Error("Theme select button class applied to non-button")}),t},l="theme",s={isOpen:"is-open",active:"is-active"};class k{isModalOpen;activeTheme;pickerModal;toggleBtn;closeBtn;themeSelectBtns;constructor(){console.log("ThemePicker constructor called"),this.isModalOpen=!1,this.activeTheme=this.getInitialActiveTheme();try{this.pickerModal=p(),console.log("Found picker modal:",this.pickerModal)}catch(e){throw console.error("Error getting picker modal:",e),e}try{this.toggleBtn=g(),console.log("Found toggle button:",this.toggleBtn)}catch(e){throw console.error("Error getting toggle button:",e),e}try{this.closeBtn=u(),console.log("Found close button:",this.closeBtn)}catch(e){throw console.error("Error getting close button:",e),e}try{this.themeSelectBtns=f(),console.log("Found theme select buttons:",this.themeSelectBtns.length)}catch(e){throw console.error("Error getting theme select buttons:",e),e}}init(){this.setActiveItem(),this.bindEvents()}hasLocalStorage(){return typeof Storage<"u"}getInitialActiveTheme(){const e=this.getStoredPreference(),o=this.getSystemPreference();return e||o||"default"}getStoredPreference(){let e;return this.hasLocalStorage()&&(e=localStorage.getItem(l)),e??!1}getSystemPreference(){let e;return window.matchMedia("(prefers-color-scheme: dark)").matches&&(e="dark"),e??!1}bindEvents(){r(this.toggleBtn,()=>this.togglePicker()),r(this.closeBtn,()=>this.togglePicker(!1)),r(m(),()=>{this.isModalOpen&&this.togglePicker(!1)}),this.themeSelectBtns.forEach(e=>{if(!("theme"in e.dataset))throw new Error(`Theme item ${e.name} is missing the 'data-theme' attribute`);const o=e.dataset.theme;o&&r(e,()=>this.setTheme(o))})}setActiveItem(){this.themeSelectBtns.forEach(e=>{e.parentElement.classList.remove(s.active),e.removeAttribute("aria-checked"),"theme"in e.dataset&&e.dataset.theme===this.activeTheme&&(e.parentElement.classList.add(s.active),e.setAttribute("aria-checked","aria-checked"))})}setTheme(e){if(this.activeTheme=e,document.documentElement.setAttribute("data-theme",e),this.hasLocalStorage()&&localStorage.setItem(l,e),document.querySelector('meta[name="theme-color"]')&&window.metaColors){const o=window.metaColors,h=e in o?o[e]:"#e2e2e2",c=document.querySelector('meta[name="theme-color"]');if(c)c.setAttribute("content",h);else throw new Error("Header <meta> element not set for 'theme-color'")}this.setActiveItem()}shouldOpen(e){return typeof e=="boolean"?e:!this.isModalOpen}togglePicker(e){if(this.isModalOpen=this.shouldOpen(e),this.toggleBtn.setAttribute("aria-expanded",String(this.isModalOpen)),this.isModalOpen)this.pickerModal.removeAttribute("hidden"),window.setTimeout(()=>{this.pickerModal.classList.add(s.isOpen)},1),this.themeSelectBtns.length&&this.themeSelectBtns.item(0).focus();else{const o=()=>this.pickerModal.setAttribute("hidden","hidden");this.pickerModal.addEventListener("transitionend",o,{once:!0}),this.pickerModal.classList.remove(s.isOpen),this.toggleBtn.focus()}}}const a=()=>{if(console.log("setupThemePicker called"),CSS.supports("color","var(--fake-var)")){console.log("CSS custom properties supported, initializing theme picker...");try{new k().init(),console.log("Theme picker initialized successfully")}catch(t){console.error("Error initializing theme picker:",t)}}else console.log("CSS custom properties not supported, theme picker disabled")};document.readyState==="loading"?document.addEventListener("DOMContentLoaded",a):a();
